Обучение - процесс трудоёмкий. Но ведь мы живём в эру информационных технологий: зачем всё делать самому, если можно переложить часть работы на компьютер?

В рамках данной статьи будет предложен концепт системы, которая позволит упростить и улучшить многие аспекты обучения.

Предлагаемая концепция выражается следующими требованиями к системе:
	1) материалы могут быть по любой из дисциплин;
	2) должна содержать множество инструментов для разработки учебных материалов, а также поддерживать их добавление;
	3) преподаватели могут выдавать индивидуальные или коллективные задания;
	4) студенты могут выполнять задания поодиночке или в группах;
	5) перед тем как решения попадут к преподавателю, они пройдут автоматизированную проверку.

Для выполнения этих требований предполагается использовать следующие роли пользователей: автор, преподаватель, разработчик и студент. При этом один и тот же пользователь может иметь несколько ролей. Приведём простой пример: аспирант и учится сам, и может быть ассистентом преподавателя, проводя лабораторные работы у студентов.

Следующая важная часть предлагаемой концепции: конструкторы, интерпретаторы и чекеры.
	1) Конструкторы позволяют преподавателю создавать учебный материал, в том числе интерактивный.
	2) Интерпретаторы отображают материал на странице и взаимодействуют с пользователем.
	3) Чекеры проверяют решения студентов, если материал предполагает ответ.

Теперь пойдём по примерам схем, отображающим взаимодействие интерпретаторов, чекеров и пользователей. На рисунках 1 и 2 изображены простейшие схемы типов "Тест" и "Эссе по литературе". В первом случае мы видим тривиальную схему, аналогичную работе любого преподавателя. Работа достаточно механическая, потому легко упрощается предлагаемой системой.

[Рисунок 1]

Хотя схематически рисунки 1 и 2 идентичны, стоит уточнить, что "Данные о других эссе" могут не задаваться напрямую преподавателем, а, например, автоматически браться из архивов готовых сочинений. Мониторить сайты с готовыми ответами уже не входит в обязанности преподавателей, поэтому студентам легко схитрить и списать. Результаты автоматической проверки на плагиат позволят преподавателям усомниться в добросовестности студентов, и ставить более заслуженные отметки.

[Рисунок 2]

На рисунке 3 можно увидеть более сложную схему - "Задача по математике". Как и в случае с тестом, работа преподавателя здесь достаточно механическая, но в то же время на порядки сложнее, чем просто сравнить два столбца символов. Проверка сотни работ с десятками интегральных задач в каждой может занять неделю, а то и больше. Автоматическая проверка значительно снизит нагрузку на преподавателя, позволяя ему сосредоточиться на процессе обучения, а не проверки.

[Рисунок 3]

На рисунке 4 можно увидеть не менее сложную схему - "Задача спортивного программирования". Как правило, именно такая схема используется на любых олимпиадах по программированию, а также тренировочных веб-ресурсах, вроде Codeforces. С помощью этой же схемы будет можно проверять и обычные лабораторные работы студентов по программированию.

[Рисунок 4]
